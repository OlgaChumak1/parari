#!/usr/bin/env node


"use strict";

process.chdir(__dirname);
process.chdir('../');

var async = require('async'),
    mkdirp = require('mkdirp'),
    path = require('path'),
    fs = require('fs');

/**
 * Copy file.
 * @param {string} src - Source file name.
 * @param {string} dest - Destination file name.
 * @param {function} callback - Callback when done.
 */
function cp(src, dest, callback) {
    async.series([
        function (callback) {
            mkdirp(path.dirname(dest), callback);
        },
        function (callback) {
            var r = fs.createReadStream(src),
                w = fs.createWriteStream(dest);
            w.on('error', function (err) {
                callback && callback(err);
                callback = null;
            });
            w.on('close', function () {
                callback(null);
            });
            r.pipe(w);
        }
    ], callback);
}


async.eachSeries([
    {
        src: 'bower_components/fabric/dist/fabric.js',
        dest: 'assets/javascripts/fabric.js'
    },
    {
        src: 'bower_components/qunit/qunit/qunit.js',
        dest: 'assets/javascripts/qunit.js'
    },
    {
        src: 'bower_components/qunit/qunit/qunit.css',
        dest: 'assets/stylesheets/qunit.css'
    }

], function (data, callback) {
    fs.exists(data.src, function (exists) {
        if (!exists) {
            callback(null);
            return;
        }
        async.series([
            function (callback) {
                cp(data.src, data.dest, callback)
            },
            function (callback) {
                console.log('File copied %s -> %s', data.src, data.dest);
                callback();
            }
        ], callback);
    });
}, function (err) {
    if (err) {
        console.error(err);
    }
});