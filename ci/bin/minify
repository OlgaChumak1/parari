#!/usr/bin/env node

"use strict";

var u = require('apeman-util'),
    async = u.ext.async,
    glob = u.ext.glob,
    path = u.core.path,
    fs = u.core.fs,
    minify = u.minify,
    config = require('../configs').minifyConfig,
    h = require('../_helper');

process.chdir(h.basedir);

function minifyFile(src, dest, converter, callback) {
    async.waterfall([
        function (callback) {
            fs.readFile(src, callback);
        },
        function (src, callback) {
            converter(src.toString(), callback);
        },
        function (content, callback) {
            h.generateFile(dest, content, callback);
        }
    ], callback);
};

function minifyJs(src, dest, callback) {
    minifyFile(src, dest, minify.minifyJsString, callback);
};

function minifyCss(src, dest, callback) {
    minifyFile(src, dest, minify.minifyCssString, callback);
};

async.eachSeries(config, function (config, callback) {
    async.waterfall([
        function (callback) {
            var src = path.resolve(config.src);
            glob(src, callback);
        },
        function (src, callback) {
            switch (config.type) {
                case 'js':
                    src = src.filter(u.filtering.patternRejectFilter(/\.min\.js$/));
                    async.each(src, function (src, callback) {
                        var dest = path.resolve(config.destDir, path.basename(src, '.js')) + '.min.js';
                        minifyJs(src, dest, callback);
                    }, callback);
                    break;
                case 'css':
                    src = src.filter(u.filtering.patternRejectFilter(/\.min\.css$/));
                    async.each(src, function (src, callback) {
                        var dest = path.resolve(config.destDir, path.basename(src, '.css')) + '.min.css';
                        minifyCss(src, dest, callback);
                    }, callback);
                    break;
                default :
                    callback(null);
                    break;
            }

        }
    ], callback);
}, h.done('Minify done!'));