#!/usr/bin/env node

/**
 * @file Build source files.
 * @ignore
 */

"use strict";

process.chdir(__dirname);


var Handlebars = require('handlebars'),
    mkdirp = require('mkdirp'),
    async = require('async'),
    path = require('path'),
    fs = require('fs');


/**
 * Load handlebars template.
 * @param {string} filename - Filename to load.
 * @param {function} callback - Callback when done.
 */
function loadTmpl(filename, callback) {
    async.waterfall([
        function (callback) {
            fs.readFile(filename, callback);
        },
        function (buffer, callback) {
            var compiled = Handlebars.compile(buffer.toString());
            callback(null, compiled);
        }
    ], callback);
}

/**
 * Generate a javascript files.
 * @param {string} srcDir - Directory with contains scripts.
 * @param {string} tmpl - Template file name.
 * @param {string} dest - Destination file name.
 * @param {function} callback - Callback when done.
 */
function generateJs(srcDir, tmpl, dest, callback) {
    async.waterfall([
        function (callback) {
            loadTmpl(tmpl, callback);
        },
        function (tmpl, callback) {
            var content = tmpl({
                scripts: fs.readdirSync(srcDir)
                    .map(function (filename) {
                        return path.resolve(srcDir, filename);
                    })
                    .map(function (filename) {
                        return fs.readFileSync(filename)
                            .toString()
                            .replace(/[\n\r]/g, '\n\t');
                    })
            });
            callback(null, content);
        },
        function (content, callback) {
            async.series([
                function (callback) {
                    mkdirp(path.dirname(dest), callback);
                },
                function (callback) {
                    fs.writeFile(dest, content, callback);
                },
                function (callback) {
                    console.log('File generated:', dest);
                    callback(null);
                }
            ], callback);
        }
    ], callback);
}

var srcDir = '../src',
    jsSrcDir = path.join(srcDir, 'javascripts'),
    cssSrcDir = path.join(srcDir, 'stylesheets'),
    tmplDir = path.join(srcDir, 'templates'),
    distDir = '.';

function compileJSFiles(srcDir, tmplDir, distDir, callback) {
    async.waterfall([
        function (callback) {
            fs.readdir(srcDir, callback);
        },
        function (filenames, callback) {
            async.each(
                filenames
                    .map(function (filename) {
                        return path.resolve(srcDir, filename)
                    })
                    .filter(function (filename) {
                        return fs.statSync(filename).isDirectory();
                    }),
                function (dirname, callback) {
                    var basename = path.basename(dirname),
                        tmpl = path.resolve(tmplDir, basename + '.hbs'),
                        dest = path.resolve(distDir, basename);
                    generateJs(dirname, tmpl, dest, callback);
                },
                callback
            )
        }
    ], callback);
}

function copyCssFiles(srcDir, distDir, callback) {
    async.waterfall([
        function (callback) {
            fs.readdir(srcDir, callback);
        },
        function (filenames, callback) {
            async.each(
                filenames
                    .filter(function (filename) {
                        return path.extname(filename) === '.css';
                    })
                    .map(function (filename) {
                        return path.resolve(srcDir, filename)
                    }),
                function (src, callback) {
                    var dest = path.join(distDir, path.basename(src)),
                        r = fs.createReadStream(src),
                        w = fs.createWriteStream(dest);
                    w.on('error', function () {
                        callback && callback(new Error('Failed to copy file'));
                        callback = null;
                    });
                    w.on('close', function () {
                        callback && callback(null);
                    });
                    r.pipe(w);

                },
                callback
            )
        }
    ], callback);
}

async.waterfall([
    function (callback) {
        compileJSFiles(jsSrcDir, tmplDir, distDir, callback);
    },
    function (callback) {
        copyCssFiles(cssSrcDir, distDir, callback);
    }
], function (err) {
    if (err) {
        console.error(err.stack || err);
    }
});