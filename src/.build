#!/usr/bin/env node

/**
 * @file Build source files.
 * @ignore
 */

"use strict";

process.chdir(__dirname);


var Handlebars = require('handlebars'),
    mkdirp = require('mkdirp'),
    async = require('async'),
    path = require('path'),
    fs = require('fs'),
    glob = require('glob');


/**
 * Load handlebars template.
 * @param {string} filename - Filename to load.
 * @param {function} callback - Callback when done.
 */
function loadTmpl(filename, callback) {
    async.waterfall([
        function (callback) {
            fs.readFile(filename, callback);
        },
        function (buffer, callback) {
            var compiled = Handlebars.compile(buffer.toString());
            callback(null, compiled);
        }
    ], callback);
}

/**
 * Generate a javascript files.
 * @param {string} srcDir - Directory with contains scripts.
 * @param {string} tmpl - Template file name.
 * @param {string} dest - Destination file name.
 * @param {function} callback - Callback when done.
 */
function generateJs(srcDir, tmpl, dest, callback) {
    async.waterfall([
        function (callback) {
            loadTmpl(tmpl, callback);
        },
        function (tmpl, callback) {
            var content = tmpl({
                scripts: fs.readdirSync(srcDir)
                    .map(function (filename) {
                        return path.resolve(srcDir, filename);
                    })
                    .map(function (filename) {
                        return fs.readFileSync(filename).toString();
                    })
            });
            callback(null, content);
        },
        function (content, callback) {
            async.series([
                function (callback) {
                    mkdirp(path.dirname(dest), callback);
                },
                function (callback) {
                    fs.writeFile(dest, content, callback);
                },
                function (callback) {
                    console.log('File generated:', dest);
                    callback(null);
                }
            ], callback);
        }
    ], callback);
}

var jsDir = 'javascripts',
    tmplDir = 'templates',
    distDir = '../dist',
    distJsDir = path.join(distDir, 'javascripts');

async.waterfall([
    function (callback) {
        fs.readdir(jsDir, callback);
    },
    function (filenames, callback) {
        async.each(
            filenames
                .map(function (filename) {
                    return path.resolve(jsDir, filename)
                })
                .filter(function (filename) {
                    return fs.statSync(filename).isDirectory();
                }),
            function (dirname, callback) {
                var basename = path.basename(dirname),
                    tmpl = path.resolve(tmplDir, basename + '.hbs'),
                    dest = path.resolve(distJsDir, basename);
                generateJs(dirname, tmpl, dest, callback);
            },
            callback
        )
    }
], function (err) {
    if (err) {
        console.error(err.stack || err);
    }
});